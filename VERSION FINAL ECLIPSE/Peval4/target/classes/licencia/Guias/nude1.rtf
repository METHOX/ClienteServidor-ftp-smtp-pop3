{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}}
{\colortbl ;\red255\green0\blue0;\red171\green178\blue191;\red224\green108\blue117;\red209\green154\blue102;\red152\green118\blue170;\red152\green195\blue121;\red0\green0\blue255;\red253\green165\blue255;\red198\green121\blue221;\red169\green183\blue198;\red166\green178\blue192;\red89\green98\blue111;\red255\green198\blue109;\red187\green181\blue41;\red210\green148\blue93;\red0\green0\blue0;}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\b\f0\fs48\lang10 ANDROID PARA DUMMIES\b0\fs22\par

\pard\sa200\sl276\slmult1\cf1\b\fs36 NO UTILIZAR FRAGMENTS A NOSER QUE SEA EN UNA APP WIPE\par
\fs28 Toast.makeText(getApplicationContext(), "This is a message displayed in a Toast", Toast.LENGTH_SHORT).show();\fs22\par
*Recuerda para a\'f1adir una actividad deberemos de a\'f1adirla al MANIFIEST*\par
*Acceder a elemento del xml :Button = (button) findViewById(R.id.ID_DEL_XML)..*\par
\cf0\b0 Extends AppCompacActivity  -> Nos proporciona los metodos necesarios para el desarrollo de nuestra aplicacion ,(On Create, FindViewByID..)\par
\b\fs40 Main de Activity\b0\fs32\line\f1\fs24 @Override\line protected void onCreate(Bundle savedInstanceState) \{\line     super.onCreate(savedInstanceState);\line     setContentView(R.layout.\b\i activity_main\b0\i0 );\f0\lang3082  //seteamos la vista en xml\f1\lang10\par
\f0\}\par
*OnCreate (Bundle) es donde inicializa su actividad. Lo m\'e1s importante es que aqu\'ed se suele llamar a setContentView (int) con un recurso de dise\'f1o que define la interfaz de usuario y usar findViewById (int) para recuperar los widgets de esa interfaz de usuario con los que necesita interactuar mediante programaci\'f3n *\par
\par
\b\fs40 ELEMENTOS VISTA (xml)\fs36\par
Estructura b\'e1sica\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf2\b0\f1\fs24 <\cf3 manifest\line     \cf4 xmlns:\cf5 android\cf4 =\cf6 "{\cf0{\field{\*\fldinst{HYPERLINK http://schemas.android.com/apk/res/android }}{\fldrslt{http://schemas.android.com/apk/res/android\ul0\cf0}}}}\f1\fs24 "\line     \cf4 xmlns:\cf5 tools\cf4 =\cf6 "http://schemas.android.com/tools"\line     \cf4 package=\cf6 "com.example.mtx.practice_list_view"\cf2 >\f0\fs30\line\f1\fs24 <\cf3 application\line     \cf5 android\cf4 :allowBackup=\cf6 "true"\line     \cf5 android\cf4 :icon=\cf6 "@mipmap/ic_launcher"\line     \cf5 android\cf4 :label=\cf6 "@string/app_name"\line     \cf5 android\cf4 :supportsRtl=\cf6 "true"\line     \cf5 android\cf4 :theme=\cf6 "@style/AppTheme"\cf2 >\line\line <\cf3 activity \cf5 android\cf4 :name=\cf6 ".main"\line     \cf5 android\cf4 :theme=\cf6 "@style/AppTheme"\cf2 >\line     <\cf3 intent-filter\cf2 >\line         <\cf3 action \cf5 android\cf4 :name=\cf6 "android.intent.action.MAIN" \cf2 />\line         <\cf3 category\f0\lang3082  \cf5\f1\lang10 android\cf4 :name=\cf6 "android.intent.category.LAUNCHER"\cf2 />\line     </\cf3 intent-filter\cf2 >\line </\cf3 activity\cf2 >\line </\cf3 application\cf2 >\par
\f0\lang3082 </\cf3 manifest\cf2 >\cf0\b\fs28\lang10\par

\pard\sa200\sl276\slmult1\fs40 ELEMENTOS DE VISTA\fs28\par
\ul ListView\ulnone\b0\fs24\par
<ListView\par
        android:layout_width="match_parent"\par
        android:layout_height="wrap_content"\par
        android:id="@+id/listView" />\par
\b\fs28 ADAPTER //\fs24 Los adaptadores obtienen los datos y los pasan, junto con una vista secundaria, a la vista del adaptador principal, que muestra la vista secundaria y los datos. Su funcion principal es la rehusar vistas\par
1.Creamos el contenido en el xml\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf2\b0\f1 <\cf3 string-array \cf4 name=\cf6 "equipoA"\cf2 >\line     <\cf3 item\cf2 >\cf0 Jose\cf2 </\cf3 item\cf2 >\line     <\cf3 item\cf2 >\cf0 Luis\cf2 </\cf3 item\cf2 >\line     <\cf3 item\cf2 >\cf0 Antonio\cf2 </\cf3 item\cf2 >\line     <\cf3 item\cf2 >\cf0 Dario\cf2 </\cf3 item\cf2 >\line     <\cf3 item\cf2 >\cf0 Wily\cf2 </\cf3 item\cf2 >\line     <\cf3 item\cf2 >\cf0 Rafael\cf2 </\cf3 item\cf2 >\line </\cf3 string-array\cf2 >\par

\pard\sa200\sl276\slmult1\cf0\b\f0 2.Capturamos el objeto ListView y los valores en un array desde nuestro activity\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\b0\f1 String [] \cf1\f0\lang3082 ARRAY\f1\lang10  \cf0 = getResources().getStringArray(R.array.\cf8\b\i equipoA\cf0\b0\i0 );\fs29\par
\cf8\fs24 listview \cf0 = findViewById(R.id.\cf8\b\i listEquipoA\cf0\b0\i0\fs29 );\f0\fs24\par

\pard\sa200\sl276\slmult1   ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,    \tab android.R.layout.simple_list_item_1, android.R.id.text1, \cf1 ARRAY\cf0 );\par
   listView.setAdapter(adapter);\par
\par
\b\fs40 ADAPTER MODIFICADO\fs24\par
-\b0 El Adapter normal debe de ser llenado por un arrray de valores primitivos, en el caso de que quisieramos pasarme un array de objetos deberemos de modificar la clase BaseAdapter extendiendola y modificandola\b\par
array adapter vs base adapter: \b0 ArrayAdapter es una implementacion de base adapter, con base adapter podremos hacer lo que queramos (base adapter + flexible) implementa todos los tipos de adaptadores\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf9\f1 public class \cf10 itemAdapter \cf9 extends \cf10 BaseAdapter\f0\lang3082  //\f1\fs29\lang10\par
\cf0\b\f0\fs24\lang3082 1.Creaci\'f3n de una clase modelo la cual servira para almacenar los datos\cf10\b0\f1\fs29\lang10\par

\pard\sa200\sl276\slmult1\cf0\f0\fs24 Class Persona...\par
\b 2.Creacion de xml vista para cada item\par
3.Pasamos a modificar nuestra clase BaseAdapter\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf10\b0\f1 ArrayList\cf11 <\cf10 itemAdapter\cf11 > \cf8 items\cf2 ;\par
private Context context\f0\lang3082 o\f1\lang10 ;\f0\lang3082 //\cf0 Permite acceder a los recursos espec\'edficos de la aplicaci\'f3n y a sus clases, as\'ed como llamar al padre para realizar operaciones a nivel de la aplicaci\'f3n, como lanzar Activities, difundir mensajes por el sistema, recibir Intents, etc. \f1\lang10  \par
\ul\b\f0\lang3082 Constuctor\par
\cf9\ulnone\b0\f1 private \cf10 Context \cf8 context\cf2 ; \cf12\i //context\line\cf10\i0 LayoutInflater \cf8 layoutInflater\cf2 ;\line\cf9 private \cf10 ArrayList\cf11 <\cf10 empleado\cf11 > \cf8 listaItems\cf2 ;\cf0\ul\b\f0\par
\cf9\ulnone\b0\f1 public \cf13 itemAdapter\cf2 ( \cf10 Context \cf2 context,  \cf10 ArrayList\cf11 <\cf10\f0 empleado\cf11\f1 > \cf2 items)\{\line\f0  \cf9\f1 super\cf2 ();\line\cf9 this\cf2 .\cf8 context \cf11 = \cf2 context;\line\cf9 this\cf2 .\cf8 listaItems \cf11 = \cf2 items;\par
\cf8 layoutInflater \cf11 = \cf8 layoutInflater\cf2 .\i from\i0 (context);\par
\}\cf0\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\tx2065\f0 Modificamos todos los metodos autogenerados para que nos retornen valores usando el array de objetos de la misma clase...\f1\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\ul\f0 el metodo autogenerado llamado \b getView\b0  es el que deberemos de modificar mas en profundidad, el cual usaremos para cargar las vistas en cada fila de nuestro listview\cf2\ulnone\f1\line     \cf14 @Override\line     \cf9 public \cf10 View \cf13 getView\cf2 (\cf9 int \cf2 position, \cf10 View \cf2 convertView, \cf10 ViewGroup \cf2 parent) \{\line         \cf9 if\cf2 (convertView\cf11 ==\cf9 null\cf2 ) \{\line             convertView \cf11 = \cf10 LayoutInflater\cf2 .\i from\i0 (\cf8 context\cf2 ).\line                     inflate(\cf10 R\cf2 .\cf10 layout\cf2 .\cf8\b\i\f0 RowView\cf2\b0\i0\f1 , parent, \cf9 false\cf2 );\f0  //HACER EL ROW LINEAR VERTICAL PREFERIBLEMENTE\f1\line\line             \cf12\i //objeto actual displayado\line             \cf9\i0 final \cf10 empleado emple \cf11 = \cf8 listaItems\cf2 .get(position);\line             \line             \cf10 TextView txt \cf11 = \cf2 (\cf10 TextView\cf2 ) \f0\tab\f1 convertView.findViewById(\cf10 R\cf2 .\cf10 id\cf2 .\cf8\b\i text_view_item_name\cf2\b0\i0 );\line             \cf10 txt\cf2 .setText(\cf10 emple\cf2 .getNombre());\line         \}\line         \cf9 return \cf2 convertView;\line     \}\line\fs26\}\par
\cf0\f0\fs24\lang10 1: The LayoutInflater takes your layout XML-files and creates different View-objects from its contents. \par
\b\lang3082 Configuracion del main para hacer uso de nuestro Adaptador personalizado\lang10\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\tx1936\cf10\b0\f1 ArrayList\cf11 <\cf10 empleado\cf11 > \cf10 personas \cf11 = \cf9 new \cf2 ArrayList\cf11 <>\cf2 ();\line\line\cf10 personas\cf2 .add(\cf9 new \cf2 empleado(\cf6 "Paco"\cf2 , \cf15 1200\cf2 ));\line\cf10 personas\cf2 .add(\cf9 new \cf2 empleado(\cf6 "Jose"\cf2 , \cf15 900\cf2 ));\line\line\cf10 itemAdapter adapter \cf11 = \cf9 new \cf2 itemAdapter(\cf9 this\cf2 , \cf10 personas\cf2 );\line\line\cf10 ListView listV \cf11 = \cf2 (\cf10 ListView\cf2 )findViewById(\cf10 R\cf2 .\cf10 id\cf2 .\cf8\b\i listView\cf2\b0\i0 );\line\cf10 listV\cf2 .setAdapter(\cf10 adapter\cf2 );\par
\cf1\b\f0\lang3082 PARA ACTUALIZAR VALORES DE NUESTRO LISTVIEW EN TIEMPO DE EJECUCION DEBEREMOS DE USAR  (en el main)\cf2\b0\par
\cf16 listView.setAdapter(adapter);\par
adapter.notifyDataChanged();\cf2\f1\lang10\par

\pard\sa200\sl276\slmult1\cf0\f0\par
\b\fs28 EVENTO LISTVIEW (extend OnItemClickListener)\par
\b0\fs24 listView.setOnClickListener(this);\b\par
\b0 @Override\par
           public void onItemClick(AdapterView<?> parent, View view,\par
              int position, long id) \{\par
            int itemPosition     = position;\par
            String  itemValue    = (String) listView.getItemAtPosition(position);\par
             Toast.makeText(getApplicationContext(),\par
               "Position :"+itemPosition+"  ListItem : " +itemValue , Toast.LENGTH_LONG)\par
               .show();\par
           \}\par
      \}); \par
\par

\pard\sa200\sl276\slmult1\tx1420\b\fs36 INTENT \par

\pard\sa200\sl276\slmult1\b0\fs24 Un Intent es un objeto que proporciona enlace de tiempo de ejecuci\'f3n entre componentes separados, como dos activity. El Intent representa la \ldblquote intenci\'f3n de hacer algo\rdblquote  de una app. Puedes usar las intents para varias tareas, pero en esta lecci\'f3n tu intent inicia otra activity. \par
\b MANDAR\b0\par
   public void sendMessage(View view) \{\par
        Intent intent = new Intent(this, DisplayMessageActivity.class);\par
        EditText editText = (EditText) findViewById(R.id.editText);\par
        String message = editText.getText().toString();\par
        intent.putExtra(EXTRA_MESSAGE, message);\par
        startActivity(intent);\par
    \}\par
\b RECIBIR\b0\par
 Intent intent = getIntent();\par
 String message = intent.getStringExtra(MainActivity.EXTRA_MESSAGE);\par
\par
\b BUNDLE MANDAR\par
\b0 bundle  = new Bundle();\par
bundle.putString("nombre"+id,a.getNombre());\par
            bundle.putInt("precio"+id,a.getPrecio());\par
intento.putExtra("bundle",bundle);\par
        startActivity(intento);\par
\b RECIBIR\par
\b0 Bundle b = (Bundle) getIntent().getExtras().get("bundle");\par
nombre.setText(b.get("nombre0").toString());\par
\b\fs36\par
SPINER \cf1\par
\cf0\b0\fs24  public void crearSpinner()\{\par
        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,\par
                android.R.layout.simple_spinner_item, contenidoSpinner );\par
        spinner.setAdapter(adapter);\par
        \}\par
\b\fs32 GET TEXT FROM SPINNER\par
\b0\fs28 Spinner spinner = (Spinner)findViewById(R.id.spinner);\par
String text = spinner.getSelectedItem().toString();\par
\b\fs32 EVENTO SPINER\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf8\b0\f1\fs23 miPageAdapter\cf2 .getF1().getSp().setOnItemSelectedListener(\cf9 new \cf10 AdapterView\cf2 .\cf10 OnItemSelectedListener\cf2 () \{\line     \cf14 @Override\line     \cf9 public void \cf13 onItemSelected\cf2 (\cf10 AdapterView\cf11 <?> \cf2 parent, \cf10 View \cf2 view, \cf9 int \cf2 position, \cf9 long \cf2 id) \{\line\line         \cf10 String contenido\cf2 ;\line         \cf10 contenido \cf11 = \cf8 miPageAdapter\cf2 .\cf8 f1\cf2 .getSp().getSelectedItem().toString();\line         \cf8 items\cf2 .add(\cf9 new \cf2 item(\cf10 contenido\cf2 , \cf6 "rojo"\cf2 , \cf6 "1999"\cf2 ));\line\line         \cf10 Toast\cf2 .\i makeText\i0 (getApplicationContext(), \cf10 contenido\cf2 , \cf10 Toast\cf2 .\cf8\b\i LENGTH_SHORT\cf2\b0\i0 ).show();\line     \}\line\line     \cf14 @Override\line     \cf9 public void \cf13 onNothingSelected\cf2 (\cf10 AdapterView\cf11 <?> \cf2 parent) \{\line\line     \}\line\});\par

\pard\sa200\sl276\slmult1\cf0\b\f0\fs32\par
\par
\b0\fs24\par
\b\fs36 CHECKBOX/RADIOBUTTONS----------------------------------->\par
\fs28 Para tener varios RadioButtons agrupados y que solo podamos seleccionar uno deberemos de englobarlos en un RadioGroup\fs36\par
\b0\fs24 <RadioGroup xmlns:android="{{\field{\*\fldinst{HYPERLINK http://schemas.android.com/apk/res/android }}{\fldrslt{http://schemas.android.com/apk/res/android\ul0\cf0}}}}\f0\fs24 "\par
    android:layout_width="match_parent"\par
    android:layout_height="wrap_content"\par
    android:orientation="vertical">\par
    <RadioButton android:id="@+id/radio_pirates"\par
        android:layout_width="wrap_content"\par
        android:layout_height="wrap_content"\par
        android:text="@string/pirates"\par
        android:onClick="onRadioButtonClicked"/>\par
    <RadioButton android:id="@+id/radio_ninjas"\par
        android:layout_width="wrap_content"\par
        android:layout_height="wrap_content"\par
        android:text="@string/ninjas"\par
        android:onClick="onRadioButtonClicked"/>\par
</RadioGroup>\par
\b\fs36 Evento radioGroup---------------------------------------------->\par
\b0\fs24 public void onRadioButtonClicked(View view) \{\par
    // Is the button now checked?\par
    boolean checked = ((RadioButton) view).isChecked();\par
\par
    // Check which radio button was clicked\par
    switch(view.getId()) \{\par
        case R.id.radio_pirates:\par
            if (checked)\par
                // Pirates are the best\par
            break;\par
        case R.id.radio_ninjas:\par
            if (checked)\par
                // Ninjas rule\par
            break;\par
    \}\par
\}\par
\b\fs36\par
APLICACION SWIPE (Paso a Paso)\par
\b0\fs24 Crear un nuevo proyecto -> Tabbed Activity\par
Borraremos todo lo innnecesario del main hasta que luzca asi:\par
\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\b\fs36\lang3082 1.CLASE MAIN\f1\lang10\par
\cf2\b0\fs24\line\cf9\fs20 public class \cf10 MainActivity \cf9 extends \cf10 AppCompatActivity\cf2\{\line\line     \cf10 ListView \cf8 listV\cf2 ;\line     \cf9 private \cf10 MiPageAdapter \cf8 mipage\cf2 ;\f0\lang3082  \cf0 //ADAPTADOR que estipulara que fragmento mostrar dependiendo      de la posicion;\f1\lang10\line\cf2     \cf9 private \cf10 ViewPager \cf8 mViewPager\cf2 ;\f0\lang3082  \cf0 // Objeto que ocupara el total del xml de nuestro main ejemplo:\par
\cf2\f1\fs18 <\cf3 android.support.v4.view.ViewPager\line     \cf5 android\cf4 :id=\cf6 "@+id/container"\line     \cf5 android\cf4 :layout_width=\cf6 "match_parent"\line     \cf5 android\cf4 :layout_height=\cf6 "match_parent"\line     \cf5 app\cf4 :layout_behavior=\cf6 "@string/appbar_scrolling_view_behavior" \cf2 />\par
\cf0\f0\fs20\lang10\line\cf2     \cf9 private \cf10 ArrayList\cf11 <\cf10 alimento\cf11 > \cf8 alimentos \cf11 = \cf9 new \cf2 ArrayList\cf11 <>\cf2 ();\line     \cf9 private \cf10 TextView \cf8 cajaCantidad\cf2 ;\line     \cf10 alimento \cf8 a\cf2 ;\line\line     \cf14 @Override\line     \cf9 protected void \cf13 onCreate\cf2 (\cf10 Bundle \cf2 savedInstanceState) \{\line         \cf9 super\cf2 .onCreate(savedInstanceState);\line         setContentView(\cf10 R\cf2 .\cf10 layout\cf2 .\cf8\b\i activity_main\cf2\b0\i0 );\line         \cf8 listV \cf11 = \cf2 findViewById(\cf10 R\cf2 .\cf10 id\cf2 .\cf8\b\i listView\cf2\b0\i0 );\line\line         \cf12\i //\lang3082 Inicializamos la clase Adapter\f1\lang10\line\line         \cf8\i0 mipage \cf11 = \cf9 new \cf2 MiPageAdapter(getSupportFragmentManager());\line\line         \cf12\i // Creamos el viewpager y seteamos su adapter\line\line         \cf8\i0 mViewPager \cf11 = \cf2 (\cf10 ViewPager\cf2 ) findViewById(\cf10 R\cf2 .\cf10 id\cf2 .\cf8\b\i container\cf2\b0\i0 );\f0\lang3082  -> id en nuestro xml\f1\lang10\line         \cf8 mViewPager\cf2 .setAdapter(\cf8 mipage\cf2 );\cf0\line\line         \i //APLICAMOS EL EVENTO DE CAMBIO DE PAGINA AL VIEWPAGER\par
\f0\lang3082\tab Nos permitira realizar acciones en cualquiera de nuestros fragmentos , accederemos a ellos mediante la instancia de la clase SectionsPagerAdapter (mpage) la cual contendra todos nuestros fragmentos\f1\lang10\line\cf12\line         \cf8\i0 mViewPager\cf2 .addOnPageChangeListener(\cf9 new \cf10 ViewPager\cf2 .\cf10 OnPageChangeListener\cf2 () \{\line             \cf14 @Override\line             \cf9 public void \cf13 onPageScrolled\cf2 (\cf9 int \cf2 i, \cf9 float \cf2 v, \cf9 int \cf2 i1) \{\line             \}\line\line             \cf14 @Override\line             \cf9 public void \cf13 onPageSelected\cf2 (\cf9 final int \cf2 posicion) \{\line\line                 \cf9 switch \cf2 (posicion) \{\line\line                     \cf9 case \cf15 0\cf11 :\line                         \cf9 break\cf2 ;\line\line                     \cf9 case \cf15 1\cf11 :\line                         \cf10 String contenido \cf11 = \cf8 mipage\cf2 .getF1().getCajaNuevoAlimento().getText().toString();\line                         \cf9 if\cf2 (\cf10 contenido\cf2 .equals(\cf6 ""\cf2 ))\{\line\line                     \}\cf9 else\cf2\{\line\line                             \cf8 a \cf11 = \cf9 new \cf2 alimento(\cf8 mipage\cf2 .getF1().getCajaNuevoAlimento().getText().toString());\line                             \cf8 alimentos\cf2 .add(\cf8 a\cf2 );\line                             \cf9 final \cf10 itemAdapter adapter \cf11 = \cf9 new \cf2 itemAdapter(getApplicationContext(), \cf8 alimentos\cf2 );\line                             \cf8 listV \cf11 = \cf2 findViewById(\cf10 R\cf2 .\cf10 id\cf2 .\cf8\b\i listView\cf2\b0\i0 );\line                             \cf8 listV\cf2 .setAdapter(\cf10 adapter\cf2 );\line\par
\f0\lang3082\tab\cf0\tab //  podremos aplicar eventos especificos a cada fragmento dentro del case \tab\tab\tab correspondiente\cf2\par
\f1\lang10\line                             \cf8 listV\cf2 .setOnItemClickListener(\cf9 new \cf10 AdapterView\cf2 .\cf10 OnItemClickListener\cf2 () \{\line                                 \cf14 @Override\line                                 \cf9 public void \cf13 onItemClick\cf2 (\cf10 AdapterView\cf11 <?> \cf2 parent, \cf10 View \cf2 view, \cf9 int \cf2 position, \cf9 long \cf2 id) \{\line                                     \cf8 a\cf2 .setCantidad(\cf8 a\cf2 .getCantidad()\cf11 +\cf15 1\cf2 );\line                                     \cf8 listV\cf2 .setAdapter(\cf8 adapter\cf2 );\line                                     \cf8 adapter\cf2 .notifyDataSetChanged();\line                                 \}\line                             \});\line                     \}\line                         \cf9 break\cf2 ;\line\line                     \cf9 case \cf15 2\cf11 :\line                         \cf9 break\cf2 ;\line                 \}\line             \}\line             \cf14 @Override\line             \cf9 public void \cf13 onPageScrollStateChanged\cf2 (\cf9 int \cf2 i) \{\line             \}\line         \});\line     \}\line\}\fs30\line\line\cf0\b\f0\fs36\lang3082 2.CLASE SectionsPagerAdapter(\cf10\b0\f1\fs20\lang10 MiPageAdapter \cf8 mipage\cf0\b\f0\fs36\lang3082 )\par
\fs24 Es la clase encargada de cargar nuestros ViewPager con cada Fragmento\par
Extendera de FragmentPagerAdapter y nos implementara un constructor y los siguientes metodos\par
\b0\fs20 Declaramos todos nuestros fragmentos como variables de clase\b\fs24\par
\cf2\b0\f1\fs18\line\cf10 IntroduccionFragment \cf8 f1\cf2 ;\par
\line\cf10\f0 ListViewFeagment\f1  \cf8 f\f0 2\cf2\f1 ;\par
\f0  \f1\line\cf10\f0 NoseFragment\f1  \cf8 f\f0 3\cf2\f1 ;\par
\line\cf9 public \cf13 SectionsPagerAdapter\cf2 (\cf10 FragmentManager \cf2 fm) \{\line     \cf9 super\cf2 (fm);\line\}\par
\f0 //Inicializaremos los fragmentos dependiendo de la posicion\f1\line\cf14 @Override\line\cf9 public \cf10 Fragment \cf13 getItem\cf2 (\cf9 int \cf2\f0 position\f1 ) \{\par
\cf0\line\fs24  if (position == 0) \{\par
            f1 = new IntroduccionFragment();\par
            return f1;\par
        \}else\{\par
            f2= new ListViewFragment();\par
            return f2;\par
        \}\}\line\cf2\fs18\par
\f0 //Pondremos el numero total de fragmentos que vamos a a\'f1adir\f1\line\cf14 @Override\line\cf9 public int \cf13 getCount\cf2 () \{\line     \cf9 return \cf15\f0 2\cf2\f1 ;\line\}\par
\f0 //GETTERS Y SETTERS DE TODOS NUESTROS FRAGMENTOS\f1\par
\cf0\b\f0\fs30 3.CREACION DE FRAGMENTOS Y SUS CORRESPONDIENTES XML\par
(Se recomienda empezar por aki)\b0\fs24\lang10\par
\fs28\par

\pard\sa200\sl276\slmult1\b FRAGMENTOS \par
\cf1  \fs24 Los fragmentos deben estar integrados en las actividades; no pueden correr independientemente de las actividades.\cf0\fs28\par
\b0\fs24 Creamos un fragmento create -> new -> fragment\par
Configuramos su correspondiente XML y en el editor de la activity en donde queramos que aparezca buscamos el elemento fragment y lo arrastramos , automaticamente nos saldra una ventana con los fragments disponibles para vincularlos\par
\par
\b\fs36 Acceder a un elemento desde un fragment\fs40\par
\b0\fs24 TextView textoSaldo;\par
@Override\par
public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) \{\par
   View rootView = inflater.inflate(R.layout.tu_fragment, container, false);\par
   textoSaldo = rootView.findViewById(R.id.saldoTextView);\par
return rootView;\par
\}\par
Creando getters and setters podremos acceder a los elementos desde el main\fs40\par
\b Acceder a un XML fuera de su contexto natural\par
-Deprecated- Pasar el evento por parametro (pendiente)\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf10\b0\f1\fs28 View v \cf11 = \cf10 LayoutInflater\cf2 .\i from\i0 (\cf9 this\cf2 ).inflate(\cf10 R\cf2 .\cf10 layout\cf2 .\cf8\b\i row_view\cf2\b0\i0 , \cf9 null\cf2 );\line\cf10 Button b \cf11 = \cf2 (\cf10 Button\cf2 )\cf10 v\cf2 .findViewById(\cf10 R\cf2 .\cf10 id\cf2 .\cf8\b\i button3\cf2\b0\i0 );\par

\pard\sa200\sl276\slmult1\cf0\b\f0\fs40 Capturar botones de forma din\'e1mica\par
\b0\fs24 Public Button[] inicializarBotones_listeners(int cantidad)\{\par
        Resources res = getResources();\par
        arraybotones = new Button[cantidad];\par
        for (int i=0; i<cantidad; i++) \{\par
            String b = "boton" + i;\par
            arraybotones[i] = (Button) findViewById(res.getIdentifier(b, "id", getPackageName()));\par
            arraybotones[i].setOnClickListener(this);\par
        \}\par
        return arraybotones;\par
    \}\par
\b\fs40\par
EJEMPLOS COMPLETOS\par
LIST VIEW DENTRO DE LIST VIEW\par
Clase base adapter....\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf14\b0\f1\fs24 @Override\line\cf9 public \cf10 View \cf13 getView\cf2 (\cf9 int \cf2 position, \cf10 View \cf2 convertView, \cf10 ViewGroup \cf2 parent) \{\line             \cf9 if\cf2 (convertView\cf11 ==\cf9 null\cf2 )\{\line                 convertView \cf11 = \cf10 LayoutInflater\cf2 .\i from\i0 (\cf8 context\cf2 ).inflate(\cf10 R\cf2 .\cf10 layout\cf2 .\cf8\b\i row_adapter\cf2\b0\i0 , parent, \cf9 false\cf2 );\line\line                  \cf10 jugador j \cf11 =\cf2 getItem(position);\line\line                 \cf10 TextView txt \cf11 = \cf2 (\cf10 TextView\cf2 ) convertView.findViewById(\cf10 R\cf2 .\cf10 id\cf2 .\cf8\b\i txtNombre\cf2\b0\i0 );\line                 \cf10 txt\cf2 .setText(\cf8 jugadores\cf2 .get(position).getNombre());\line\par
\cf16\f0\lang3082 //LIST VIEW SECUNDARIO , DEBERA DE CONTENER SU PROPIO XML\par
\cf2\f1\lang10\line                 \cf10 ListView listViewJugador \cf11 = \cf2 (\cf10 ListView\cf2 ) convertView.findViewById(\cf10 R\cf2 .\cf10 id\cf2 .\cf8\b\i listViewJugador\cf2\b0\i0 );\line                 \cf10 ArrayAdapter\cf11 <\cf10 String\cf11 > \cf10 adapter \cf11 = \cf9 new \cf2 ArrayAdapter\cf11 <\cf10 String\cf11 >\cf2 (\cf8 context\cf2 , \cf10 R\cf2 .\cf10 layout\cf2 .\cf8\b\i equipos\cf2\b0\i0 , \cf10 R\cf2 .\cf10 id\cf2 .\cf8\b\i textView\cf2\b0\i0 , \cf10 j\cf2 .getEquipos());\line                 \cf10 listViewJugador\cf2 .setAdapter(\cf10 adapter\cf2 );\line             \}\line             \cf9 return \cf2 convertView;\line\}\par

\pard\sa200\sl276\slmult1\cf1\b\f0 Si queremos a\'f1adir un evento al ListView que esta dentro del ListView deberemos de a\'f1adirlo en el getView\par
\par
\cf0\b0 Toast.makeText(getApplicationContext(), "This is a message displayed in a Toast", Toast.LENGTH_SHORT); toast.show()\b\fs40\par
\par
\par
\par
\par
\par
\par
\b0\fs24  \par
}
 